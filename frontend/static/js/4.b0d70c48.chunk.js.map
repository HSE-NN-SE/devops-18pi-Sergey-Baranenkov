{"version":3,"sources":["components/audio/AudioPage.js","images/track_cover.ico"],"names":["AudioPage","state","UserMusic","AllMusic","offset","searchInputValue","isFetching","popupOpen","Done","error","pageId","props","match","params","id","isPageMine","playerStoreState","userId","fetchLimit","addMusicRef","createRef","handleError","bind","handleClose","fetchMusic","a","val","address","HTTP","ADDR","withValue","limit","setState","Fetcher","response","fetchInitialMusic","handleScrollThrottled","Throttle","console","log","Math","abs","window","scrollY","innerHeight","document","documentElement","scrollHeight","fetchInitialMusicDebounced","Debounce","onPopupClose","onFileDownloaded","current","files","length","postMusic","author","title","data","FormData","append","music_id","adder_id","myId","name","addToPlaylistHandler","musicId","deleteMusic","filter","track","playUserMusicHandler","updatePlayerStoreState","playlist","trackIndex","done","playlistName","playAllMusicHandler","onInputChange","event","target","value","this","addEventListener","removeEventListener","className","text","style","color","placeholder","onChange","type","accept","ref","htmlFor","map","UserTrack","key","playMusicHandler","deleteMusicHandler","AddAudioPopup","onClose","_onSend","React","Component","memo","useState","buttonActive","updateButtonActive","onClick","src","track_cover","alt","e","stopPropagation","disabled","_updateAuthor","_updateTitle","withRouter","module","exports"],"mappings":"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","file":"static/js/4.b0d70c48.chunk.js","sourcesContent":["import React, {createRef, useState, memo} from \"react\";\nimport \"./audio.scss\"\nimport \"../../scss/video_audio.scss\";\nimport \"../../scss/default_popup.scss\"\nimport Debounce from \"../../functools/Debounce\";\nimport Throttle from \"../../functools/Trottle\";\nimport Fetcher from \"../../functools/Fetcher\";\nimport \"../../scss/hidden_input.scss\"\nimport {withRouter} from \"react-router-dom\"\nimport track_cover from \"../../images/track_cover.ico\"\nimport {HTTP,  ADDR} from \"../../address\";\nimport InfoPopup, {handleError, handleClose} from \"../infoPopup/infoPopup\";\n\nclass AudioPage extends React.Component{\n    state = {\n        UserMusic: [],\n        AllMusic : [],\n        offset: 0,\n        searchInputValue: \"\",\n        isFetching: false,\n        popupOpen: false,\n        Done: false,\n        error: null\n    }\n    pageId = + this.props.match.params.id;\n    isPageMine = this.props.playerStoreState.userId === this.pageId;\n    fetchLimit = 20;\n    addMusicRef = createRef();\n\n    handleError = handleError.bind(this);\n    handleClose = handleClose.bind(this);\n    fetchMusic = async () => {\n        const offset = this.state.offset;\n        const val = this.state.searchInputValue;\n        const address = HTTP + ADDR + `/music/${val === \"\"? \"get_user_music\" : \"get_combined_music\" }`;\n        const params = {userId: this.pageId, offset: offset, withValue: val, limit: this.fetchLimit}\n        this.setState({isFetching: true});\n        const [error, response] = await Fetcher(\n            address,\n            params\n        )\n        if (error === null){\n            this.setState(state => ({\n                offset: offset + this.fetchLimit,\n                UserMusic: [...state.UserMusic, ...response.UserMusic],\n                AllMusic: [...state.AllMusic, ...response.AllMusic],\n                Done: response.Done\n            }));\n        }else {\n            this.handleError(\"ошибка при получении данных с сервера\");\n        }\n        this.setState({isFetching: false});\n    }\n\n    fetchInitialMusic = ()=> {\n        this.setState(\n            {offset: 0, Done: false, UserMusic: [], AllMusic : []},\n            () => this.fetchMusic()\n        );\n    }\n\n    componentDidMount(){\n        this.fetchInitialMusic();\n        window.addEventListener('scroll', this.handleScrollThrottled, true);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScrollThrottled);\n    }\n\n    handleScrollThrottled = Throttle(()=>{\n        console.log(this.state.Done, this.state.popupOpen, this.state.isFetching);\n        if ((Math.abs(window.scrollY + window.innerHeight - document.documentElement.scrollHeight) < 10)\n            &&\n            !this.state.Done\n            &&\n            !this.state.popupOpen\n            &&\n            !this.state.isFetching\n        ){\n            this.fetchMusic();\n        }\n    }, 1000 )\n\n\n    fetchInitialMusicDebounced = Debounce(()=>{\n        this.setState(\n            {UserMusic: [], AllMusic : [], offset: 0},\n            () =>this.fetchInitialMusic()\n        );\n    }, 500);\n\n\n    onPopupClose = ()=>{\n        this.setState({popupOpen: false});\n    }\n\n    onFileDownloaded = ()=>{\n        if (this.addMusicRef.current.files.length) {\n            this.setState({popupOpen: true});\n        }\n    }\n\n    postMusic = async (author, title)=>{\n        this.onPopupClose();\n        const data = new FormData();\n        data.append(\"audio\", this.addMusicRef.current.files[0])\n        const [error, response] = await Fetcher(\n            HTTP + ADDR + \"/music/post_music\",\n            {author, title},\n            'POST',\n            \"text\",\n            data);\n\n        if (error === null){\n            this.setState(state => (\n                {UserMusic:\n                    [\n                        {\n                            music_id: response,\n                            adder_id: this.myId,\n                            author: author,\n                            name: title\n                        },\n\n                        ...state.UserMusic\n                    ],\n                offset: state.offset + 1\n            }))\n        }else{\n            this.handleError(\"ошибка отправки данных на сервер\");\n        }\n    }\n\n    addToPlaylistHandler = async (music_id) => {\n       const [error] = await Fetcher(\n            HTTP + ADDR + \"/music/add_to_playlist\",\n            {musicId: music_id},\n            \"POST\",\n            \"text\"\n        )\n        if (error !== null){\n            this.handleError(\"ошибка при добавлении музыки в плейлист\");\n        }\n    }\n\n    deleteMusic = async(musicId) =>{\n        const [error] = await Fetcher(\n            HTTP + ADDR + \"/music/remove_music\",\n            {musicId},\n            \"GET\",\n            \"text\"\n        )\n        if (error === null){\n            this.setState(state => ({\n                offset: this.offset - 1,\n                UserMusic: state.UserMusic.filter((track)=>track.music_id !== musicId)}\n                ));\n        }else {\n            this.handleError(\"ошибка при удалении музыки\");\n        }\n    }\n\n    playUserMusicHandler = (offset) => {\n        this.props.updatePlayerStoreState({\n            playlist: this.state.UserMusic,\n            trackIndex: offset,\n            done: false,\n            playlistName: \"UserMusic\",\n            withValue: this.state.searchInputValue,\n            userId: this.pageId\n        })\n    }\n\n    playAllMusicHandler = (offset) => {\n        this.props.updatePlayerStoreState({\n            playlist: this.state.AllMusic,\n            trackIndex: offset,\n            done: false,\n            playlistName: \"AllMusic\",\n            withValue: this.state.searchInputValue,\n            userId: this.pageId\n        })\n    }\n\n    onInputChange = (event)=> {\n        this.setState({searchInputValue: event.target.value});\n        this.fetchInitialMusicDebounced()\n    }\n\n    render() {\n        return (\n            <div className={\"page__container\"}>\n                {this.state.error && <InfoPopup text = {this.state.error} handleClose = {this.handleClose}/>}\n                <div className={\"page__header background_pic__city background_pic__city_green\"}>\n                    <h1 style={{color: \"white\"}}>Музыка</h1>\n                    <p style={{color:  \"white\"}}>Здесь вы можете послушать музыку</p>\n                    <div className={\"audio_foreground_pic default_img\"}/>\n                </div>\n                <div className={\"VA_func_block\"}>\n                    <input className={\"default_search_input\"}\n                           placeholder={\"Поиск музыки\"}\n                           value={this.state.searchInputValue}\n                           onChange={this.onInputChange}/>\n                    <input\n                        type={\"file\"}\n                        className={\"hidden_input\"}\n                        id = {\"select_audio_file__input\"}\n                        accept={\"audio/*\"}\n                        ref = {this.addMusicRef}\n                        onChange={this.onFileDownloaded}\n                    />\n                    <label htmlFor=\"select_audio_file__input\">+</label>\n                </div>\n                {\n                    this.state.UserMusic.map( (track, offset) =>\n                        <UserTrack\n                            key = {track.music_id}\n                            offset = {offset}\n                            playMusicHandler = {this.playUserMusicHandler}\n                            deleteMusicHandler = {this.deleteMusic}\n                            name = {track.name}\n                            author = {track.author}\n                            music_id = {track.music_id}\n                            isPageMine = {this.isPageMine}\n                        />\n                    )\n                }\n                {this.state.AllMusic.length ? <div>Все аудиозаписи</div> : null}\n                {\n                    this.state.AllMusic.map((track,offset) =>\n                        <UserTrack\n                            key = {track.music_id}\n                            offset = {offset}\n                            name = {track.name}\n                            author = {track.author}\n                            music_id = {track.music_id}\n                            playMusicHandler = {this.playAllMusicHandler}\n                            addToPlaylistHandler = {this.addToPlaylistHandler}\n                        />\n                    )\n                }\n                {this.state.isFetching && <span>Загрузка...</span>}\n                {this.state.popupOpen && <AddAudioPopup onClose={this.onPopupClose} _onSend={this.postMusic}/>}\n            </div>\n\n        )\n    }\n}\n\nconst UserTrack = memo(({isPageMine, playMusicHandler, deleteMusicHandler, offset, name, author, music_id, addToPlaylistHandler})=>{\n    const [buttonActive, updateButtonActive] = useState(true);\n\n    const onPlay = () =>{\n        playMusicHandler(offset)\n    }\n\n    const onDelete = (e) =>{\n        e.stopPropagation();\n        deleteMusicHandler(music_id);\n    }\n\n    const onAdd = (e)=>{\n        e.stopPropagation();\n        addToPlaylistHandler(music_id);\n        updateButtonActive(false);\n    }\n\n\n    return (\n        <div className={\"audio_track\"} onClick={onPlay}>\n            <div className={\"audio_info\"}>\n                <img className={\"audio_cover\"} src={track_cover} alt = {\" \"}/>\n                <span className={\"audio_track__name\"}>{name}</span>\n                <span className={\"audio_track__author\"}>{author}</span>\n            </div>\n            {isPageMine ?\n                <div>\n                    <button className={\"audio__button audio__button-delete\"}\n                            onClick={onDelete}>❌</button>\n                </div>\n                :\n                <div>\n                    <button className={\"audio__button audio__button-add\"}\n                            onClick={onAdd}\n                            disabled={!buttonActive}\n                    >{buttonActive ? '+' : '✓'}</button>\n                </div>\n\n            }\n        </div>\n        )\n});\n\nfunction AddAudioPopup({onClose, _onSend}) {\n    const [author, _updateAuthor] = useState(\"\");\n    const [title, _updateTitle] = useState(\"\");\n\n    const onSend = () =>{\n        _onSend(author, title);\n    }\n    const updateAuthor = ({target})=>{\n        _updateAuthor(target.value);\n    }\n    const updateTitle = ({target})=>{\n        _updateTitle(target.value);\n    }\n    return (\n        <div className=\"b-popup\">\n            <div className=\"b-popup-content\">\n                <button className={\"popup_button__close\"} onClick={onClose}>×</button>\n                <input placeholder={\"Автор\"} value={author} onChange={updateAuthor}/>\n                <input placeholder={\"Название\"} value={title} onChange={updateTitle}/>\n                <button className={\"popup_button__action\"} onClick={onSend}>Загрузить</button>\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(AudioPage);","module.exports = __webpack_public_path__ + \"static/media/track_cover.384858af.ico\";"],"sourceRoot":""}