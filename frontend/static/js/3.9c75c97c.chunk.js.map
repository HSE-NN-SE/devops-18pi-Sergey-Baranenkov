{"version":3,"sources":["oldNewRelMatchDict.js","components/profile/ProfilePage.js","components/addNewMessageArea/addNewMessageArea.js","images/f_add.ico","images/f_friends.ico","images/f_req_from.ico","images/f_req_to.ico"],"names":["oldNewRelMatchDict","0","1","2","3","relationshipsIcons","f_add","f_to_ico","f_from_ico","f_f_ico","ProfilePage","state","posts","profileInfo","offset","myId","getCookie","postsFetchLimit","relationButtonClickedHandler","a","Fetcher","HTTP","ADDR","userId","props","match","params","id","prevRelType","rel","setState","handleScrollThrottled","Throttle","Math","abs","window","scrollY","innerHeight","document","documentElement","scrollHeight","Done","popupOpen","isFetching","fetchPosts","fetchProfileInfo","limit","error","response","Posts","console","log","componentDidMount","addEventListener","componentDidUpdate","prevProps","addNewPost","text","newPost","auth_id","path","num_likes","creation_time","modification_time","first_name","last_name","num_comments","me_liked","s","postNewLikeState","meLiked","deletePost","filter","post","updatePostLike","Debounce","copy","map","removeEventListener","this","className","src","PathFromIdGenerator","alt","to","country","pathname","user_id","type","onClick","style","backgroundImage","display","undefined","city","birthday","tel","buttonMessage","placeholder","onSend","Array","isArray","Post","key","images_list","imageId","idx","React","Component","memo","useState","comments","updateComments","postEditable","updatePostEditable","textRef","useRef","addNewComment","newComment","children","split","slice","el","length","pointer","i","push","updateCommentLike","newComments","splitPath","comment","find","join","getComments","fetch","method","result","json","onPostDelete","onPostEdit","JSON","stringify","Path","Text","current","innerText","deleteComment","ProfileAvatarBlock","name","description","contentEditable","ref","c_props","Comment","showReplyArea","updateShowReplyArea","commentEditable","updateCommentEditable","onCommentDelete","onCommentEdit","paddingLeft","withRouter","AddNewMessageArea","onSmileAddHandler","target","oldMessage","value","selectionStart","focus","setSelectionRange","smile","role","module","exports"],"mappings":"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","file":"static/js/3.9c75c97c.chunk.js","sourcesContent":["export const oldNewRelMatchDict = {0:1, 1:0, 2:3, 3:2};","import React, {memo, useState, useRef} from \"react\";\nimport ProfileAvatarBlock from \"./ProfileAvatarBlock\";\nimport {withRouter, NavLink as Link} from \"react-router-dom\"\nimport AddNewMessageArea from \"../addNewMessageArea/addNewMessageArea\";\nimport Fetcher from \"../../functools/Fetcher\";\nimport \"./profile_page.scss\"\nimport \"../../scss/default_blocks.scss\"\nimport \"../../scss/page.scss\"\nimport PathFromIdGenerator from \"../../functools/PathFromIdGenerator\";\nimport Debounce from \"../../functools/Debounce\";\nimport getCookie from \"../../functools/getCookie\";\nimport {oldNewRelMatchDict} from \"../../oldNewRelMatchDict\";\nimport f_add from \"../../images/f_add.ico\"\nimport f_f_ico from \"../../images/f_friends.ico\"\nimport f_from_ico from \"../../images/f_req_from.ico\"\nimport f_to_ico from \"../../images/f_req_to.ico\"\nimport Throttle from \"../../functools/Trottle\";\nimport {HTTP, ADDR} from \"../../address\";\n\nconst relationshipsIcons = [f_add, f_to_ico, f_from_ico, f_f_ico];\n\nclass ProfilePage extends React.Component {\n    state = {posts: [], profileInfo: {}, offset: 0}\n    myId = +getCookie(\"userId\");\n    postsFetchLimit = 10;\n\n    relationButtonClickedHandler = async () => {\n        const [error] = await Fetcher (\n            HTTP + ADDR + \"/relations/update_relationship\",\n            {userId: this.props.match.params.id, prevRelType: this.state.profileInfo.rel},\n            \"POST\",\n            \"text\"\n            );\n        if (error === null){\n            const profileInfo = {...this.state.profileInfo};\n            profileInfo.rel = oldNewRelMatchDict[profileInfo.rel];\n            this.setState({profileInfo});\n        }\n    }\n\n    handleScrollThrottled = Throttle(() => {\n        if ((Math.abs(window.scrollY + window.innerHeight - document.documentElement.scrollHeight) < 10)\n            &&\n            !this.state.Done\n            &&\n            !this.state.popupOpen\n            &&\n            !this.state.isFetching\n        ){\n            this.fetchPosts();\n        }\n    }, 1000);\n\n    fetchProfileInfo = async () =>{\n        let [, profileInfo] = await Fetcher(\n            HTTP + ADDR + `/profile/page_info`,\n            {userId: this.props.match.params.id});\n        this.setState({profileInfo : profileInfo || {}})\n    }\n\n    fetchPosts = async () => {\n        const offset = this.state.offset;\n        const params = {userId: this.props.match.params.id, offset: offset, limit: this.postsFetchLimit}\n        this.setState(() => ({isFetching: true}));\n\n        const [error, response] = await Fetcher(HTTP + ADDR + \"/profile/get_posts\", params);\n        if (error === null){\n            this.setState(state => ({\n                offset: offset + this.postsFetchLimit,\n                posts: [...state.posts, ...response.Posts],\n                Done: response.Done\n            }));\n        }else {\n            console.log(error);\n        }\n        this.setState({isFetching: false});\n    }\n\n    componentDidMount = () => {\n        window.addEventListener('scroll', this.handleScrollThrottled, true);\n        this.fetchProfileInfo();\n        this.fetchPosts();\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScrollThrottled);\n    }\n\n    componentDidUpdate = async (prevProps) => {\n        if (this.props.match.params.id !== prevProps.match.params.id){\n            this.setState({posts: [], profileInfo: {}, offset: 0}, ()=>{\n                this.fetchProfileInfo();\n                this.fetchPosts();\n            })\n        }\n    }\n\n    addNewPost = async (text)=>{\n        const [error, response] = await Fetcher(HTTP + ADDR + \"/profile/add_new_object\",\n            {text: text},\n            \"POST\",\n            \"json\",\n        )\n        if (error === null){\n            const newPost = {\n                text: text,\n                auth_id : this.myId,\n                path: response.path,\n                num_likes: 0,\n                creation_time: \"только что\",\n                modification_time: null,\n                first_name: \"Vladimir\",\n                last_name: \"Putin\",\n                num_comments: 0,\n                me_liked: false\n            };\n            this.setState(s => ({posts: [newPost, ...s.posts], offset: s.offset + 1}));\n        }\n    }\n\n\n    postNewLikeState = async (meLiked, path) => {\n        const [error] = await Fetcher(\n            HTTP + ADDR + \"/profile/update_like\",\n            {meLiked: meLiked, path: path},\n            \"POST\",\n            \"text\"\n        );\n        return error === null;\n\n    }\n\n    deletePost = (path)=>{\n        this.setState(s => ({posts: s.posts.filter(post => post.path !== path), offset: s.offset - 1}));\n    }\n\n    updatePostLike = new Debounce(async (meLiked, path)=>{\n        if (await this.postNewLikeState(meLiked, path)){\n            const copy = this.state.posts.map( post =>{\n                if (post.path === path){\n                    post.num_likes += post.me_liked ? -1 : 1;\n                    post.me_liked = !post.me_liked;\n                }\n                return post;\n            });\n            this.setState({posts: copy});\n        }\n    }, 100)\n\n    render() {\n        return (\n            <div className={\"page__container\"}>\n                <div className={\"profile__header_pics\"}>\n                    <img className={\"default_img profile__bg_pic\"}\n                         src={HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(this.props.match.params.id)}/profile_bg.jpg`}\n                         alt = {\"\"}\n                    />\n                    <img className={\"default_img avatar profile__avatar\"}\n                         src={HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(this.props.match.params.id)}/profile_avatar.jpg`}\n                         alt = {\"\"}\n                    />\n                </div>\n\n                <div className={\"navigator\"}>\n                    <div className={\"navigator__item\"}>\n                        <Link to = {`/about_me/${this.props.match.params.id}`}>Обо мне</Link>\n                    </div>\n\n                    <div className={\"navigator__item\"}>\n                        <Link to = {`/связи/${this.props.match.params.id}/друзья`}>\n                            Мои друзья\n                        </Link>\n                    </div>\n\n                    <div className={\"navigator__item\"}>\n                        <Link to = {`/фотографии/${this.props.match.params.id}`}>\n                            Мои фото\n                        </Link>\n                    </div>\n\n                    <div className={\"navigator__item profile__descr\"}>\n                        <p className={\"profile_name\"}>{`${this.state.profileInfo.first_name} ${this.state.profileInfo.last_name}`}</p>\n                        <p className={\"profile_country\"}>{this.state.profileInfo.country}</p>\n                    </div>\n\n                    <div className={\"navigator__item\"}>\n                        <Link to = {`/музыка/${this.props.match.params.id}`}>\n                            Моя музыка\n                        </Link>\n                    </div>\n\n                    <div className={\"navigator__item\"}>\n                        <Link to = {`/видео/${this.props.match.params.id}`}>\n                            Мои видео\n                        </Link>\n                    </div>\n\n                    <div className={\"navigator__item\"}>\n                        <div className={\"navigator__functional\"}>\n                            <Link to = {{\n                                pathname: '/сообщения/',\n                                user_id: this.props.match.params.id,\n                                first_name: this.state.profileInfo.first_name,\n                                last_name: this.state.profileInfo.last_name,\n                            }}>\n                                <div className={\"default_img open_conversation_img navigator__functional_item\"}/>\n                            </Link>\n                            <button type={\"button\"}\n                                    className={\"default_img relations_with_me__button navigator__functional_item\"}\n                                    onClick={this.relationButtonClickedHandler}\n                                    style={{\n                                        backgroundImage: `url(${relationshipsIcons[this.state.profileInfo.rel]})`,\n                                        display: `${this.state.profileInfo.rel === undefined ? 'none': 'block'}`\n                                    }}\n                            />\n                        </div>\n                    </div>\n                </div>\n\n                <div className={\"profile_info__container\"}>\n                    <div className={\"profile__sidebar__left\"}>\n                        <div className={\"default_block\"}>\n                            <h1 className={\"default_block__header\"}>Кратко обо мне</h1>\n                            <div className={\"default_block__item\"}>\n                                <h2>Город проживания:</h2>\n                                <p>{this.state.profileInfo.city  || \"Не указано\"}</p>\n                            </div>\n                            <div className={\"default_block__item\"}>\n                                <h2>День рождения:</h2>\n                                <p>{this.state.profileInfo.birthday  || \"Не указано\"}</p>\n                            </div>\n                            <div className={\"default_block__item\"}>\n                                <h2>Телефон:</h2>\n                                <p>{this.state.profileInfo.tel  || \"Не указано\"}</p>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={\"profile__posts\"}>\n\n                        <AddNewMessageArea\n                            buttonMessage = {\"Опубликовать\"}\n                            placeholder = {\"Что у Вас нового?\"}\n                            onSend = {this.addNewPost}\n                        />\n\n                        {Array.isArray(this.state.posts) && this.state.posts.map((post)=>\n                            <>\n                                <Post\n                                    key = {post.path}\n                                    updatePostLike = {this.updatePostLike}\n                                    postNewLikeState = {this.postNewLikeState}\n                                    deletePost = {this.deletePost}\n                                    myId = {this.myId}\n                                    {...post}\n                                />\n                            </>\n                            )\n                        }\n                    </div>\n\n\n                    <div className={\"profile__sidebar__right\"}>\n                        <div className={\"default_block\"}>\n                            <h1 className={\"default_block__header\"}>Последние фото</h1>\n                            <div className={\"profile_gallery__container\"}>\n                                {\n                                    Array.isArray(this.state.profileInfo.images_list)\n                                    && this.state.profileInfo.images_list.map( (imageId, idx)=>\n                                        <img\n                                            key = {idx}\n                                            className={\"profile_gallery__item\"}\n                                            src={HTTP + ADDR + `/gallery_storage${PathFromIdGenerator(imageId)}/img.jpg`}\n                                            alt = {\"\"}\n                                        >\n                                        </img>\n                                    )\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nconst Post = memo(({updatePostLike, postNewLikeState, deletePost, ...props}) => {\n    const [comments, updateComments] = useState([]);\n    const [postEditable, updatePostEditable] = useState(false);\n\n    const textRef = useRef();\n    const _updatePostLike = () => {\n        updatePostLike(props.me_liked, props.path);\n    }\n\n    const addNewComment = async (text, path = props.path)=>{\n        const [error, response] = await Fetcher(\n            HTTP + ADDR + \"/profile/add_new_object\",\n            {text: text, path: path},\n            \"POST\"\n        );\n        if (error === null) {\n            const newComment = {\n                creation_time: response.creation_time,\n                first_name: \"Vladimir\",\n                last_name: \"Putin\",\n                me_liked: false,\n                auth_id: props.myId,\n                modification_time: null,\n                num_likes: 0,\n                path: response.path,\n                text: text,\n                children: []\n            }\n\n            let copy;\n            path = path.split('.').slice(1).map((el)=> el - 1);\n            if (path.length === 0){\n                copy = [...comments, newComment]\n            }else{\n                copy = [...comments];\n                let pointer = copy[path[0]];\n                for (let i = 1; i < path.length; i++){\n                    pointer = pointer.children[path[i]];\n                }\n                pointer.children.push(newComment);\n            }\n            updateComments(copy);\n        }\n    }\n\n    const updateCommentLike = new Debounce(async(meLiked, path)=>{\n        if (await postNewLikeState(meLiked, path)){\n            let newComments;\n            const splitPath = path.split('.');\n            if (splitPath.length === 2){\n                newComments = comments.map(comment => {\n                    if (comment.path === path){\n                        comment.num_likes += comment.me_liked ? -1 : 1;\n                        comment.me_liked = !comment.me_liked;\n                    }\n                    return comment;\n                })\n            }else{\n                newComments = [...comments];\n                let pointer = newComments.find((comment) => comment.path === splitPath.slice(0, 2).join('.'));\n                for (let i = 2; i < splitPath.length; i++){\n                    pointer = pointer.children.find((comment) => comment?.path === splitPath.slice(0, i+1).join('.'));\n                }\n                pointer.num_likes += pointer.me_liked ? -1 : 1;\n                pointer.me_liked = !pointer.me_liked;\n            }\n            updateComments(newComments);\n        }\n    }, 100)\n\n    const getComments = async () =>{\n        try{\n            const result = await fetch(HTTP + ADDR + `/profile/get_comments?path=${props.path}&lim=${10}`,{method: \"get\"});\n            const json = await result.json();\n            await updateComments(json);\n        }catch(e)\n        {\n            console.log(e);\n        }\n    };\n\n    const onPostDelete = async ()=>{\n        const [error] = await Fetcher(\n            HTTP + ADDR + \"/profile/delete_object\",\n            null,\n            \"POST\",\n            \"text\",\n            props.path\n        )\n\n        if (error === null){\n            deletePost(props.path);\n        }\n    }\n\n    const onPostEdit = async ()=>{\n        if (postEditable){\n            Fetcher(\n                HTTP + ADDR + \"/profile/update_object_text\",\n                null,\n                \"POST\",\n                \"text\",\n                JSON.stringify({Path: props.path, Text:textRef.current.innerText})\n                )\n        }\n        updatePostEditable(!postEditable);\n    }\n\n    const deleteComment = (path) =>{\n        let newComments;\n        const splitPath = path.split('.');\n        if (splitPath.length === 2){\n            newComments = comments.filter(comment => {\n                return comment.path !== path\n            });\n\n        }else{\n            newComments = [...comments];\n            let pointer = newComments.find((comment) => comment.path === splitPath.slice(0, 2).join('.'));\n            for (let i = 2; i < splitPath.length - 1; i++){\n                pointer = pointer.children.find((comment) => comment?.path === splitPath.slice(0, i+1).join('.'));\n            }\n            pointer.children = pointer.children.filter(comment => {\n                return comment.path !== path\n            });\n        }\n        updateComments(newComments);\n    }\n    return (\n        <div className={\"record post\"}>\n            <div className={\"record__header\"}>\n                <ProfileAvatarBlock\n                    src = {HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(props.auth_id)}/profile_avatar.jpg`}\n                    name = {props.first_name + \" \" + props.last_name}\n                    description = {`Добавлен: ${props.creation_time}` + (props.modification_time ? ` изменен: ${props.modification_time}`:'')}\n                />\n            </div>\n\n            <div className={\"record__text\"} contentEditable={postEditable} ref = {textRef}>\n                {props.text}\n            </div>\n\n            <div className={\"record__footer\"}>\n                <div className={\"footer_item likes\"}>\n                    <button type={\"button\"}\n                            className={`footer_icon default_img ${props.me_liked? 'liked_pic':'not_liked_pic'}`}\n                            onClick={_updatePostLike}\n                    />\n                    <p>{props.num_likes}</p>\n                </div>\n\n                <div className={\"footer_item comments\"}>\n                    <button type={\"button\"} onClick={getComments} className={\"footer_icon default_img comments_pic\"}/>\n                    <p>{props.num_comments}+</p>\n                </div>\n\n                {props.myId === props.auth_id\n                 &&\n                <div className={\"footer_item post_comment__functional\"}>\n                    <button type={\"button\"}\n                            className={\"footer_icon default_img post_comment_button__edit\"}\n                            onClick={onPostEdit}\n\n                    >{postEditable ? '✓' : '🖉'}</button>\n                    <button type={\"button\"}\n                            className={\"footer_icon default_img post_comment_button__delete\"}\n                            onClick={onPostDelete}\n                    >❌</button>\n                </div>\n                }\n\n            </div>\n            {Array.isArray(comments) && comments.map((c_props)=>\n                <Comment\n                    key={c_props.path}\n                    updateCommentLike = {updateCommentLike}\n                    addNewComment={addNewComment}\n                    deleteComment = {deleteComment}\n                    myId = {props.myId}\n                    {...c_props}\n                />)\n            }\n            <AddNewMessageArea placeholder={\"Оставить комментарий\"} buttonMessage={\"Комментировать\"} onSend={addNewComment}/>\n        </div>\n    )\n})\n\nfunction Comment({children = [], addNewComment, updateCommentLike, deleteComment,  ...props}) {\n    const [showReplyArea, updateShowReplyArea] = useState(false);\n    const [commentEditable, updateCommentEditable] = useState(false);\n    const textRef = useRef()\n\n    const onCommentDelete = async ()=>{\n        const [error] = await Fetcher(\n            HTTP + ADDR + \"/profile/delete_object\",\n            null,\n            \"POST\",\n            \"text\",\n            props.path\n        )\n\n        if (error === null){\n            deleteComment(props.path);\n        }\n    }\n\n    const _addNewComment = (text)=>{\n        updateShowReplyArea(false);\n        addNewComment(text, props.path);\n    }\n\n    const updateLike = () => {\n        updateCommentLike(props.me_liked, props.path);\n    };\n\n    const onReplyClickHandler = () =>{\n        updateShowReplyArea(true);\n    }\n\n    const onCommentEdit = async ()=>{\n        if (commentEditable){\n            Fetcher(\n                HTTP + ADDR + \"/profile/update_object_text\",\n                null,\n                \"POST\",\n                \"text\",\n                JSON.stringify({Path: props.path, Text:textRef.current.innerText})\n            )\n        }\n        updateCommentEditable(!commentEditable);\n    }\n\n    return (\n        <div className={\"comment_container\"} style={{paddingLeft: '10px'}}>\n            <div className={\"record comment\"}>\n                <div className={\"record__header\"}>\n                    <ProfileAvatarBlock\n                        src = {HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(props.auth_id)}/profile_avatar.jpg`}\n                        name = {props.first_name + \" \" + props.last_name}\n                        description = {`Добавлен: ${props.creation_time}` + (props.modification_time ? ` изменен: ${props.modification_time}`:'')}\n                    />\n                </div>\n\n                <div className={\"record__text\"} ref = {textRef} contentEditable={commentEditable}>\n                    {props.text}\n                </div>\n\n                <div className={\"record__footer\"}>\n                    <div className={\"footer_item likes\"}>\n                        <button type={\"button\"} onClick={updateLike} className={`footer_icon default_img ${props.me_liked? 'liked_pic':'not_liked_pic'}`}/>\n                        <p>{props.num_likes}</p>\n                    </div>\n\n                    <div className={\"footer_item reply\"} onClick={onReplyClickHandler}>\n                        <button type={\"button\"} className={\"footer_icon default_img reply_pic\"}/>\n                    </div>\n                    {props.myId === props.auth_id\n                    &&\n                    <div className={\"footer_item post_comment__functional\"}>\n                        <button type={\"button\"}\n                                className={\"footer_icon default_img post_comment_button__edit\"}\n                                onClick={onCommentEdit}\n\n                        >{commentEditable ? '✓' : '🖉'}</button>\n                        <button type={\"button\"}\n                                className={\"footer_icon default_img post_comment_button__delete\"}\n                                onClick={onCommentDelete}\n                        >❌</button>\n                    </div>\n                    }\n                </div>\n                {showReplyArea && <AddNewMessageArea buttonMessage={\"Ответить\"} onSend={_addNewComment}/>}\n                {children.map((c_props)=> c_props && <Comment updateCommentLike = {updateCommentLike}\n                                                              key={c_props.path}\n                                                              addNewComment={addNewComment}\n                                                              deleteComment = {deleteComment}\n                                                              myId = {props.myId}\n                                                              {...c_props}\n                />)}\n            </div>\n        </div>\n    )\n}\n\n\nexport default withRouter(ProfilePage)","import React, {memo, useRef} from \"react\";\nimport \"./add_new_message_area.scss\"\nimport \"../../scss/default_blocks.scss\"\n\nconst AddNewMessageArea = memo (({placeholder, buttonMessage, onSend}) => {\n    const smiles = ['😐','😫','😎', '😂', '😡', '😭', '😀','😗','😲','😬']\n    const ref = useRef()\n    const _onSend = () => {\n        onSend(ref.current.value);\n        ref.current.value = \"\";\n    }\n    const onSmileAddHandler = ({target})=>{\n        const oldMessage = ref.current.value;\n        const selectionStart = ref.current.selectionStart;\n        ref.current.value = oldMessage.slice(0, selectionStart) + target.innerText + oldMessage.slice(selectionStart, oldMessage.length);\n        ref.current.focus();\n        ref.current.setSelectionRange(selectionStart + 2, selectionStart + 2);\n    }\n    return (\n        <div className={\"send_new_message__container\"}>\n            <textarea className={\"default_search_input\"}\n                      placeholder={placeholder}\n                      ref={ref}\n            />\n            <div className={\"send_new_message__functional_area\"}>\n                <div className={\"smile_area\"}>\n                    {\n                        smiles.map(smile =>\n                            <span className={\"smile\"}\n                                  key = {smile}\n                                  role={\"img\"}\n                                  onClick={onSmileAddHandler}\n                            >\n                                {smile}\n                            </span>\n                        )\n                    }\n                </div>\n                <button className={\"add_record__button\"} onClick={_onSend}>{buttonMessage}</button>\n            </div>\n        </div>\n    )\n})\n\nexport default AddNewMessageArea;","module.exports = __webpack_public_path__ + \"static/media/f_add.7e42a7ae.ico\";","module.exports = __webpack_public_path__ + \"static/media/f_friends.1639cc31.ico\";","module.exports = __webpack_public_path__ + \"static/media/f_req_from.f634f58a.ico\";","module.exports = __webpack_public_path__ + \"static/media/f_req_to.05fd42bf.ico\";"],"sourceRoot":""}