{"version":3,"sources":["components/messages/MessagesPage.js","components/addNewMessageArea/addNewMessageArea.js","images/undefined_avatar.png"],"names":["MessagesPage","state","conversations","messengerMessagesList","messengerConversationId","undefined","messengerPartnerInfo","userId","first_name","last_name","profile_avatar","messengerOffset","conversationsOffset","conversationsDone","messengerMessagesDone","areConversationsFetching","messengerAreMessagesFetching","conversationsLimit","messagesLimit","socket","WebSocket","WS","ADDR","myId","getCookie","handleConversationListScroll","target","difference","scrollTopMax","scrollTop","_handleConversationListScroll","Throttle","fetchConversations","onMessengerTopBoundaryReached","fetchMessages","a","offset","Fetcher","HTTP","userId2","limit","error","response","setState","s","Done","MessagesList","reverse","ConversationId","openDialog","avatar_ref","PathFromIdGenerator","Conversations","this","props","location","user_id","params","onopen","console","log","onerror","onmessage","event","json","JSON","parse","data","unknownConversationFlag","newConversations","map","conversation","conversation_id","message_text","conversationId","close","className","onScroll","Conversation","key","onChoose","chosenId","Messenger","messagesList","partnerInfo","React","Component","memo","partner_id","style","backgroundColor","cursor","tabIndex","onClick","src","alt","length","slice","messagesBoxRef","useRef","useEffect","current","pointerEvents","undefined_avatar_pic","name","nameColor","description","descriptionColor","ref","message","Message","text","senderId","message_from","message_id","placeholder","buttonMessage","onSend","messageTo","messageText","withRouter","AddNewMessageArea","onSmileAddHandler","oldMessage","value","selectionStart","innerText","focus","setSelectionRange","smile","role","module","exports"],"mappings":"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","file":"static/js/5.306fd102.chunk.js","sourcesContent":["import React, {memo, useEffect, useRef} from \"react\";\nimport \"./messages_page.scss\";\nimport {withRouter} from \"react-router-dom\";\nimport ProfileAvatarBlock from \"../profile/ProfileAvatarBlock\";\nimport getCookie from \"../../functools/getCookie\";\nimport Fetcher from \"../../functools/Fetcher\";\nimport undefined_avatar_pic from \"../../images/undefined_avatar.png\"\nimport AddNewMessageArea from \"../addNewMessageArea/addNewMessageArea\";\nimport \"../../scss/default_blocks.scss\"\nimport Throttle from \"../../functools/Trottle\";\nimport PathFromIdGenerator from \"../../functools/PathFromIdGenerator\";\nimport {WS, ADDR, HTTP} from \"../../address\";\n\nclass MessagesPage extends React.Component{\n    state = {\n        conversations: [],\n        messengerMessagesList: [],\n        messengerConversationId: undefined,\n        messengerPartnerInfo : {userId: undefined, first_name: undefined, last_name: undefined, profile_avatar: undefined},\n        messengerOffset: 0,\n        conversationsOffset : 0,\n        conversationsDone : false,\n        messengerMessagesDone : false,\n        areConversationsFetching : false,\n        messengerAreMessagesFetching: false\n    }\n    conversationsLimit = 20;\n    messagesLimit = 20;\n\n    socket = new WebSocket(WS + ADDR + \"/messenger/\");\n    myId = +getCookie(\"userId\");\n\n    componentDidMount () {\n        if (this.props.location.user_id !== undefined){\n            const params = this.props.location;\n            this.openDialog(params.user_id, params.first_name,\n                params.last_name)\n        }\n\n        this.fetchConversations()\n\n        this.socket.onopen = () => {\n            console.log(\"[open] Соединение установлено\");\n        }\n        this.socket.onerror = () => {\n            console.log(\"[error] Ошибка соединения\");\n        }\n\n        this.socket.onmessage = async (event) => {\n            const json = JSON.parse(event.data);\n            let unknownConversationFlag = true;\n\n            let newConversations = this.state.conversations.map( conversation => {\n                if (conversation.conversation_id === json.conversation_id) {\n                    unknownConversationFlag = false;\n                    conversation.message_text = json.message_text;\n                    return conversation;\n                } else {\n                    return conversation\n                }\n            });\n\n            if (unknownConversationFlag === true) {\n                const [error, response] = await Fetcher(\n                    HTTP + ADDR + \"/messenger/get_short_profile_info\",\n                    {conversationId: json.conversation_id}\n                    );\n                if (error === null){\n                    newConversations = [{...response, ...json}, ...newConversations];\n                    this.setState(s => ({conversationsOffset : s.conversationsOffset + 1}))\n                }else{\n                    console.error(\"unhandled error\")\n                }\n            }\n            this.setState({conversations: newConversations});\n            if (json.conversation_id === this.state.messengerConversationId){\n                this.setState(state => ({messengerMessagesList: [...state.messengerMessagesList, json]}))\n            }\n        };\n\n    }\n\n    handleConversationListScroll = ({target}) => {\n        const difference = target.scrollTopMax - target.scrollTop;\n        this._handleConversationListScroll(difference);\n    }\n\n    _handleConversationListScroll = Throttle((difference)=> {\n            if (difference < 10 &&\n                !this.state.conversationsDone &&\n                !this.state.areConversationsFetching) {\n                this.fetchConversations();\n            }\n        }, 1000\n    )\n\n\n    onMessengerTopBoundaryReached = Throttle((difference)=>{\n        if (difference < 10 &&\n            !this.state.messengerMessagesDone &&\n            !this.state.messengerAreMessagesFetching) {\n            this.fetchMessages();\n        }\n    }, 1000)\n\n\n    componentWillUnmount() {\n        this.socket.close();\n    }\n\n    fetchMessages = async ()=>{\n        const offset = this.state.messengerOffset;\n        const [error, response] =  await Fetcher(HTTP + ADDR + \"/messenger/conversation_messages\",\n            {\n                userId2: this.state.messengerPartnerInfo.userId,\n                limit: this.messagesLimit,\n                offset: offset\n            }\n        );\n\n        if (error === null){\n            this.setState(s => ({\n                messengerOffset: offset + this.messagesLimit,\n                Done: response.Done,\n                messengerMessagesList: [...response.MessagesList.reverse(), ...s.messengerMessagesList],\n                messengerConversationId: response.ConversationId\n            }))\n        }\n        return [error, response];\n    }\n\n    openDialog = (userId, first_name, last_name)=>{\n        this.setState(\n            {\n                messengerPartnerInfo : {userId, first_name, last_name, avatar_ref: HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(userId)}/profile_avatar.jpg`},\n                messengerMessagesList: [],\n                messengerConversationId: null,\n                Done: false,\n                messengerOffset : 0\n            },\n            ()=>{this.fetchMessages()}\n            );\n    }\n\n    fetchConversations = async (offset) =>{\n        if (offset === undefined) offset = this.state.conversationsOffset;\n        const [error, response] = await Fetcher(HTTP + ADDR + \"/messenger/conversation_list\",{limit: this.conversationsLimit, offset: offset});\n        if (error === null){\n            this.setState(s => ({conversations: [...s.conversations, ...response.Conversations], conversationsOffset: offset + this.conversationsLimit, conversationsDone: response.Done}));\n        }\n    }\n\n    render() {\n        return (\n            <div className={\"message_page\"}>\n                <div className={\"conversations_list\"} onScroll={this.handleConversationListScroll}>\n                    {\n                        this.state.conversations.map((conversation)=>(\n                            <Conversation key = {conversation.conversation_id}\n                                          onChoose = {this.openDialog}\n                                          chosenId = {this.state.messengerPartnerInfo.userId}\n                                          {...conversation}\n                            />\n                        ))\n                    }\n                </div>\n\n                <Messenger myId = {this.myId}\n                           messagesList = {this.state.messengerMessagesList}\n                           partnerInfo = {this.state.messengerPartnerInfo}\n                           onMessengerTopBoundaryReached = {this.onMessengerTopBoundaryReached}\n                />\n            </div>\n        )\n    }\n}\n\nconst Conversation = memo(({onChoose, chosenId, partner_id, first_name, last_name, message_text})=>{\n    const handleChoose = () => onChoose(partner_id, first_name, last_name);\n    return (\n      <div className={\"rel__container\"}\n           style={{backgroundColor: `${chosenId === partner_id ? \"lightgoldenrodyellow\" : \"white\"}`, cursor: 'pointer'}}\n           tabIndex={1}\n           onClick={handleChoose}\n      >\n          <img className={\"default_img rel_user__avatar\"}\n               src={HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(partner_id)}/profile_avatar.jpg`}\n               alt = {\"\"}\n          />\n          <div className={\"rel_user__vertical\"}>\n              <span className={\"rel_user__fullname\"}>{`${first_name} ${last_name}`}</span>\n              <span className={\"rel_user__last_message\"}>{`${message_text.length > 24 ? message_text.slice(0,24) + \"...\" : message_text}`}</span>\n          </div>\n      </div>\n    )\n})\n\nconst Messenger = memo (({messagesList, myId, partnerInfo, onMessengerTopBoundaryReached}) => {\n\n    const handleMessagesListScroll = ({target}) => {\n        const difference = target.scrollTop;\n        onMessengerTopBoundaryReached(difference);\n    }\n\n    const messagesBoxRef = useRef(null);\n    useEffect(() => {\n        /*\n        * 200 is the difference between new bottom and old scroll\n        * when user is not scrolling old messages, but ready for new ones - scroll to bottom\n        */\n        if (messagesBoxRef.current.scrollTopMax - messagesBoxRef.current.scrollTop < 200){\n            messagesBoxRef.current.scrollTop = messagesBoxRef.current.scrollTopMax;\n        }\n    });\n\n    const pushMessage = (text) => {\n        Fetcher(\n            HTTP + ADDR + \"/messenger/push_message\",\n            {messageTo: partnerInfo.userId, messageText: text },\n            \"POST\",\n            \"text\"\n        );\n    };\n\n    return(\n        <div className={\"messenger\"} style={{pointerEvents: `${partnerInfo.userId === undefined?'none':'auto'}`}}>\n            <div className={\"messenger__header\"}>\n                <ProfileAvatarBlock\n                    src = {partnerInfo.avatar_ref || undefined_avatar_pic}\n                    name = {`${partnerInfo.first_name || \"\"} ${partnerInfo.last_name || \"\"}`}\n                    nameColor = \"white\"\n                    description = \"\"\n                    descriptionColor = \"cadetblue\"\n                />\n            </div>\n\n            <div className={\"messenger__messages-box\"} ref = {messagesBoxRef} onScroll={handleMessagesListScroll}>\n                {\n                    messagesList.map((message) =>\n                        <Message text = {message.message_text}\n                                 myId = {myId}\n                                 senderId = {message.message_from}\n                                 key = {message.message_id}\n                        />\n                    )\n                }\n            </div>\n\n            <div className={\"messenger__send_new_message\"}>\n                {partnerInfo.userId===undefined && <div className={\"tumbleweed\"}/>}\n                <AddNewMessageArea placeholder = {\"Отправить сообщение\"}\n                                   buttonMessage = {\"Отправить\"}\n                                   onSend = {pushMessage}\n                />\n            </div>\n        </div>\n    )\n})\n\nconst Message = memo(({text = \"\", myId, senderId}) => {\n    return (\n            <div className={`message ${senderId === myId ? 'message__from_me' : 'message__from_friend'}`}>\n                {text}\n            </div>\n        )\n});\n\nexport default withRouter(MessagesPage);","import React, {memo, useRef} from \"react\";\nimport \"./add_new_message_area.scss\"\nimport \"../../scss/default_blocks.scss\"\n\nconst AddNewMessageArea = memo (({placeholder, buttonMessage, onSend}) => {\n    const smiles = ['😐','😫','😎', '😂', '😡', '😭', '😀','😗','😲','😬']\n    const ref = useRef()\n    const _onSend = () => {\n        onSend(ref.current.value);\n        ref.current.value = \"\";\n    }\n    const onSmileAddHandler = ({target})=>{\n        const oldMessage = ref.current.value;\n        const selectionStart = ref.current.selectionStart;\n        ref.current.value = oldMessage.slice(0, selectionStart) + target.innerText + oldMessage.slice(selectionStart, oldMessage.length);\n        ref.current.focus();\n        ref.current.setSelectionRange(selectionStart + 2, selectionStart + 2);\n    }\n    return (\n        <div className={\"send_new_message__container\"}>\n            <textarea className={\"default_search_input\"}\n                      placeholder={placeholder}\n                      ref={ref}\n            />\n            <div className={\"send_new_message__functional_area\"}>\n                <div className={\"smile_area\"}>\n                    {\n                        smiles.map(smile =>\n                            <span className={\"smile\"}\n                                  key = {smile}\n                                  role={\"img\"}\n                                  onClick={onSmileAddHandler}\n                            >\n                                {smile}\n                            </span>\n                        )\n                    }\n                </div>\n                <button className={\"add_record__button\"} onClick={_onSend}>{buttonMessage}</button>\n            </div>\n        </div>\n    )\n})\n\nexport default AddNewMessageArea;","module.exports = __webpack_public_path__ + \"static/media/undefined_avatar.e630516b.png\";"],"sourceRoot":""}