{"version":3,"sources":["components/messages/MessagesPage.js","components/addNewMessageArea/addNewMessageArea.js","images/undefined_avatar.png"],"names":["MessagesPage","state","conversations","messengerMessagesList","messengerConversationId","undefined","messengerPartnerInfo","userId","first_name","last_name","profile_avatar","messengerOffset","conversationsOffset","conversationsDone","messengerMessagesDone","areConversationsFetching","messengerAreMessagesFetching","error","conversationsLimit","messagesLimit","socket","WebSocket","WS","ADDR","myId","getCookie","handleError","bind","handleClose","openConversationFromOtherPage","params","props","location","openDialog","user_id","handleConversationListScroll","target","difference","scrollTopMax","scrollTop","_handleConversationListScroll","Throttle","fetchConversations","onMessengerTopBoundaryReached","fetchMessages","a","offset","Fetcher","HTTP","userId2","limit","response","setState","s","Done","MessagesList","reverse","ConversationId","avatar_ref","PathFromIdGenerator","Conversations","prevProps","prevState","snapshot","this","onopen","console","log","onerror","onmessage","event","json","JSON","parse","data","unknownConversationFlag","newConversations","map","conversation","conversation_id","message_text","conversationId","message_to","close","className","onScroll","Conversation","key","onChoose","chosenId","Messenger","messagesList","partnerInfo","text","React","Component","memo","partner_id","style","backgroundColor","cursor","tabIndex","onClick","src","alt","length","slice","messagesBoxRef","useRef","useEffect","current","pointerEvents","undefined_avatar_pic","name","nameColor","description","descriptionColor","ref","message","Message","senderId","message_from","message_id","placeholder","buttonMessage","onSend","send","stringify","messageTo","messageText","withRouter","AddNewMessageArea","onSmileAddHandler","oldMessage","value","selectionStart","innerText","focus","setSelectionRange","smile","role","module","exports"],"mappings":"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","file":"static/js/5.a789ab58.chunk.js","sourcesContent":["import React, {memo, useEffect, useRef} from \"react\";\nimport \"./messages_page.scss\";\nimport {withRouter} from \"react-router-dom\";\nimport ProfileAvatarBlock from \"../profile/ProfileAvatarBlock\";\nimport getCookie from \"../../functools/getCookie\";\nimport Fetcher from \"../../functools/Fetcher\";\nimport undefined_avatar_pic from \"../../images/undefined_avatar.png\"\nimport AddNewMessageArea from \"../addNewMessageArea/addNewMessageArea\";\nimport \"../../scss/default_blocks.scss\"\nimport Throttle from \"../../functools/Trottle\";\nimport PathFromIdGenerator from \"../../functools/PathFromIdGenerator\";\nimport {WS, ADDR, HTTP} from \"../../address\";\nimport InfoPopup, {handleError, handleClose} from \"../infoPopup/infoPopup\";\nclass MessagesPage extends React.Component{\n    state = {\n        conversations: [],\n        messengerMessagesList: [],\n        messengerConversationId: undefined,\n        messengerPartnerInfo : {userId: undefined, first_name: undefined, last_name: undefined, profile_avatar: undefined},\n        messengerOffset: 0,\n        conversationsOffset : 0,\n        conversationsDone : false,\n        messengerMessagesDone : false,\n        areConversationsFetching : false,\n        messengerAreMessagesFetching: false,\n        error: null\n    }\n    conversationsLimit = 20;\n    messagesLimit = 20;\n\n    socket = new WebSocket(WS + ADDR + \"/messenger/\");\n    myId = +getCookie(\"userId\");\n    handleError = handleError.bind(this);\n    handleClose = handleClose.bind(this);\n\n    openConversationFromOtherPage = ()=>{\n        const params = this.props.location;\n        this.openDialog(params.user_id, params.first_name, params.last_name);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.location.user_id !== this.props.location.user_id){ // searchbar message when on messages page\n            this.openConversationFromOtherPage()\n        }\n    }\n\n    componentDidMount () {\n        if (this.props.location.user_id !== undefined){\n            this.openConversationFromOtherPage()\n        }\n\n        this.fetchConversations()\n\n        this.socket.onopen = () => {\n            console.log(\"[open] Соединение установлено\");\n        }\n        this.socket.onerror = () => {\n            console.log(\"[error] Ошибка соединения\");\n        }\n\n        this.socket.onmessage = async (event) => {\n            const json = JSON.parse(event.data);\n            let unknownConversationFlag = true;\n\n            let newConversations = this.state.conversations.map( conversation => {\n                if (conversation.conversation_id === json.conversation_id) {\n                    unknownConversationFlag = false;\n                    conversation.message_text = json.message_text;\n                    return conversation;\n                } else {\n                    return conversation\n                }\n            });\n\n            if (unknownConversationFlag === true) {\n                const [error, response] = await Fetcher(\n                    HTTP + ADDR + \"/messenger/get_short_profile_info\",\n                    {conversationId: json.conversation_id}\n                    );\n                if (error === null){\n                    newConversations = [{...response, ...json}, ...newConversations];\n                    this.setState(s => ({conversationsOffset : s.conversationsOffset + 1}))\n                }else{\n                    this.handleError(\"Невозможно загрузить информацию профиля\")\n                }\n            }\n            this.setState({conversations: newConversations});\n            if (this.state.messengerConversationId === 0 && this.state.messengerPartnerInfo.userId === json.message_to){\n                this.setState(()=> ({messengerConversationId: json.conversation_id}));\n            }\n\n            if (json.conversation_id === this.state.messengerConversationId){\n                this.setState(state => ({messengerMessagesList: [...state.messengerMessagesList, json]}))\n            }\n        };\n\n    }\n\n    handleConversationListScroll = ({target}) => {\n        const difference = target.scrollTopMax - target.scrollTop;\n        this._handleConversationListScroll(difference);\n    }\n\n    _handleConversationListScroll = Throttle((difference)=> {\n            if (difference < 10 &&\n                !this.state.conversationsDone &&\n                !this.state.areConversationsFetching) {\n                this.fetchConversations();\n            }\n        }, 1000\n    )\n\n\n    onMessengerTopBoundaryReached = Throttle((difference)=>{\n        if (difference < 10 &&\n            !this.state.messengerMessagesDone &&\n            !this.state.messengerAreMessagesFetching) {\n            this.fetchMessages();\n        }\n    }, 1000)\n\n\n    componentWillUnmount() {\n        this.socket.close();\n    }\n\n    fetchMessages = async ()=>{\n        const offset = this.state.messengerOffset;\n        const [error, response] =  await Fetcher(HTTP + ADDR + \"/messenger/conversation_messages\",\n            {\n                userId2: this.state.messengerPartnerInfo.userId,\n                limit: this.messagesLimit,\n                offset: offset\n            }\n        );\n\n        if (error === null){\n            this.setState(s => ({\n                messengerOffset: offset + this.messagesLimit,\n                Done: response.Done,\n                messengerMessagesList: [...response.MessagesList.reverse(), ...s.messengerMessagesList],\n                messengerConversationId: response.ConversationId\n            }))\n        }else{\n            this.handleError(\"Невозможно загрузить сообщения с сервера\")\n        }\n        return [error, response];\n    }\n\n    openDialog = (userId, first_name, last_name)=>{\n        this.setState(\n            {\n                messengerPartnerInfo : {userId, first_name, last_name, avatar_ref: HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(userId)}/profile_avatar.jpg`},\n                messengerMessagesList: [],\n                messengerConversationId: undefined,\n                Done: false,\n                messengerOffset : 0\n            },\n            ()=>{this.fetchMessages()}\n            );\n    }\n\n    fetchConversations = async (offset) =>{\n        if (offset === undefined) offset = this.state.conversationsOffset;\n        const [error, response] = await Fetcher(HTTP + ADDR + \"/messenger/conversation_list\",{limit: this.conversationsLimit, offset: offset});\n        if (error === null){\n            this.setState(s => ({conversations: [...s.conversations, ...response.Conversations], conversationsOffset: offset + this.conversationsLimit, conversationsDone: response.Done}));\n        }else{\n            this.handleError(\"Невозможно загрузить список диалогов\")\n        }\n    }\n\n    render() {\n        return (\n            <div className={\"message_page\"}>\n                <div className={\"conversations_list\"} onScroll={this.handleConversationListScroll}>\n                    {\n                        this.state.conversations.map((conversation)=>(\n                            <Conversation key = {conversation.conversation_id}\n                                          onChoose = {this.openDialog}\n                                          chosenId = {this.state.messengerPartnerInfo.userId}\n                                          {...conversation}\n                            />\n                        ))\n                    }\n                </div>\n\n                <Messenger myId = {this.myId}\n                           messagesList = {this.state.messengerMessagesList}\n                           partnerInfo = {this.state.messengerPartnerInfo}\n                           onMessengerTopBoundaryReached = {this.onMessengerTopBoundaryReached}\n                           socket = {this.socket}\n                />\n                {this.state.error && <InfoPopup text = {this.state.error} handleClose = {this.handleClose}/>}\n            </div>\n        )\n    }\n}\n\nconst Conversation = memo(({onChoose, chosenId, partner_id, first_name, last_name, message_text})=>{\n    const handleChoose = () => onChoose(partner_id, first_name, last_name);\n    return (\n      <div className={\"rel__container\"}\n           style={{backgroundColor: `${chosenId === partner_id ? \"lightgoldenrodyellow\" : \"white\"}`, cursor: 'pointer'}}\n           tabIndex={1}\n           onClick={handleChoose}\n      >\n          <img className={\"default_img rel_user__avatar\"}\n               src={HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(partner_id)}/profile_avatar.jpg`}\n               alt = {\" \"}\n          />\n          <div className={\"rel_user__vertical\"}>\n              <span className={\"rel_user__fullname\"}>{`${first_name} ${last_name}`}</span>\n              <span className={\"rel_user__last_message\"}>{`${message_text.length > 24 ? message_text.slice(0,24) + \"...\" : message_text}`}</span>\n          </div>\n      </div>\n    )\n})\n\nconst Messenger = memo (({messagesList, myId, partnerInfo, onMessengerTopBoundaryReached, socket}) => {\n\n    const handleMessagesListScroll = ({target}) => {\n        const difference = target.scrollTop;\n        onMessengerTopBoundaryReached(difference);\n    }\n\n    const messagesBoxRef = useRef(null);\n    useEffect(() => {\n        /*\n        * 200 is the difference between new bottom and old scroll\n        * when user is not scrolling old messages, but ready for new ones - scroll to bottom\n        */\n        if (messagesBoxRef.current.scrollTopMax - messagesBoxRef.current.scrollTop < 200){\n            messagesBoxRef.current.scrollTop = messagesBoxRef.current.scrollTopMax;\n        }\n    });\n\n    const pushMessage = (text) => {\n        socket.send(JSON.stringify({messageTo: +partnerInfo.userId, messageText: text}))\n    };\n\n    return(\n        <div className={\"messenger\"} style={{pointerEvents: `${partnerInfo.userId === undefined?'none':'auto'}`}}>\n            <div className={\"messenger__header\"}>\n                <ProfileAvatarBlock\n                    src = {partnerInfo.avatar_ref || undefined_avatar_pic}\n                    name = {`${partnerInfo.first_name || \"\"} ${partnerInfo.last_name || \"\"}`}\n                    nameColor = \"white\"\n                    description = \"\"\n                    descriptionColor = \"cadetblue\"\n                />\n            </div>\n\n            <div className={\"messenger__messages-box\"} ref = {messagesBoxRef} onScroll={handleMessagesListScroll}>\n                {\n                    messagesList.map((message) =>\n                        <Message text = {message.message_text}\n                                 myId = {myId}\n                                 senderId = {message.message_from}\n                                 key = {message.message_id}\n                        />\n                    )\n                }\n            </div>\n\n            <div className={\"messenger__send_new_message\"}>\n                {partnerInfo.userId===undefined && <div className={\"tumbleweed\"}/>}\n                <AddNewMessageArea placeholder = {\"Отправить сообщение\"}\n                                   buttonMessage = {\"Отправить\"}\n                                   onSend = {pushMessage}\n                />\n            </div>\n        </div>\n    )\n})\n\nconst Message = memo(({text = \"\", myId, senderId}) => {\n    return (\n            <div className={`message ${senderId === myId ? 'message__from_me' : 'message__from_friend'}`}>\n                {text}\n            </div>\n        )\n});\n\nexport default withRouter(MessagesPage);","import React, {memo, useRef} from \"react\";\nimport \"./add_new_message_area.scss\"\nimport \"../../scss/default_blocks.scss\"\n\nconst AddNewMessageArea = memo (({placeholder, buttonMessage, onSend}) => {\n    const smiles = ['😐','😫','😎', '😂', '😡', '😭', '😀','😗','😲','😬']\n    const ref = useRef()\n    const _onSend = () => {\n        onSend(ref.current.value);\n        ref.current.value = \"\";\n    }\n    const onSmileAddHandler = ({target})=>{\n        const oldMessage = ref.current.value;\n        const selectionStart = ref.current.selectionStart;\n        ref.current.value = oldMessage.slice(0, selectionStart) + target.innerText + oldMessage.slice(selectionStart, oldMessage.length);\n        ref.current.focus();\n        ref.current.setSelectionRange(selectionStart + 2, selectionStart + 2);\n    }\n    return (\n        <div className={\"send_new_message__container\"}>\n            <textarea className={\"default_search_input\"}\n                      placeholder={placeholder}\n                      ref={ref}\n            />\n            <div className={\"send_new_message__functional_area\"}>\n                <div className={\"smile_area\"}>\n                    {\n                        smiles.map(smile =>\n                            <span className={\"smile\"}\n                                  key = {smile}\n                                  role={\"img\"}\n                                  onClick={onSmileAddHandler}\n                            >\n                                {smile}\n                            </span>\n                        )\n                    }\n                </div>\n                <button className={\"add_record__button\"} onClick={_onSend}>{buttonMessage}</button>\n            </div>\n        </div>\n    )\n})\n\nexport default AddNewMessageArea;","module.exports = __webpack_public_path__ + \"static/media/undefined_avatar.e630516b.png\";"],"sourceRoot":""}