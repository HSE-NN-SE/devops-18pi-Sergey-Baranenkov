{"version":3,"sources":["components/messages/MessagesPage.js","components/addNewMessageArea/addNewMessageArea.js","images/undefined_avatar.png"],"names":["MessagesPage","state","conversations","messengerMessagesList","messengerConversationId","undefined","messengerPartnerInfo","userId","first_name","last_name","profile_avatar","messengerOffset","conversationsOffset","conversationsDone","messengerMessagesDone","areConversationsFetching","messengerAreMessagesFetching","error","conversationsLimit","messagesLimit","socket","WebSocket","WS","ADDR","myId","getCookie","handleError","bind","handleClose","handleConversationListScroll","target","difference","scrollTopMax","scrollTop","_handleConversationListScroll","Throttle","fetchConversations","onMessengerTopBoundaryReached","fetchMessages","a","offset","Fetcher","HTTP","userId2","limit","response","setState","s","Done","MessagesList","reverse","ConversationId","openDialog","avatar_ref","PathFromIdGenerator","Conversations","this","props","location","user_id","params","onopen","console","log","onerror","onmessage","event","json","JSON","parse","data","unknownConversationFlag","newConversations","map","conversation","conversation_id","message_text","conversationId","close","className","onScroll","Conversation","key","onChoose","chosenId","Messenger","messagesList","partnerInfo","text","React","Component","memo","partner_id","style","backgroundColor","cursor","tabIndex","onClick","src","alt","length","slice","messagesBoxRef","useRef","useEffect","current","pushMessage","messageTo","messageText","pointerEvents","undefined_avatar_pic","name","nameColor","description","descriptionColor","ref","message","Message","senderId","message_from","message_id","placeholder","buttonMessage","onSend","withRouter","AddNewMessageArea","onSmileAddHandler","oldMessage","value","selectionStart","innerText","focus","setSelectionRange","smile","role","module","exports"],"mappings":"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","file":"static/js/5.53ebf5f9.chunk.js","sourcesContent":["import React, {memo, useEffect, useRef} from \"react\";\nimport \"./messages_page.scss\";\nimport {withRouter} from \"react-router-dom\";\nimport ProfileAvatarBlock from \"../profile/ProfileAvatarBlock\";\nimport getCookie from \"../../functools/getCookie\";\nimport Fetcher from \"../../functools/Fetcher\";\nimport undefined_avatar_pic from \"../../images/undefined_avatar.png\"\nimport AddNewMessageArea from \"../addNewMessageArea/addNewMessageArea\";\nimport \"../../scss/default_blocks.scss\"\nimport Throttle from \"../../functools/Trottle\";\nimport PathFromIdGenerator from \"../../functools/PathFromIdGenerator\";\nimport {WS, ADDR, HTTP} from \"../../address\";\nimport InfoPopup, {handleError, handleClose} from \"../infoPopup/infoPopup\";\nclass MessagesPage extends React.Component{\n    state = {\n        conversations: [],\n        messengerMessagesList: [],\n        messengerConversationId: undefined,\n        messengerPartnerInfo : {userId: undefined, first_name: undefined, last_name: undefined, profile_avatar: undefined},\n        messengerOffset: 0,\n        conversationsOffset : 0,\n        conversationsDone : false,\n        messengerMessagesDone : false,\n        areConversationsFetching : false,\n        messengerAreMessagesFetching: false,\n        error: null\n    }\n    conversationsLimit = 20;\n    messagesLimit = 20;\n\n    socket = new WebSocket(WS + ADDR + \"/messenger/\");\n    myId = +getCookie(\"userId\");\n    handleError = handleError.bind(this);\n    handleClose = handleClose.bind(this);\n    componentDidMount () {\n        if (this.props.location.user_id !== undefined){\n            const params = this.props.location;\n            this.openDialog(params.user_id, params.first_name,\n                params.last_name)\n        }\n\n        this.fetchConversations()\n\n        this.socket.onopen = () => {\n            console.log(\"[open] Соединение установлено\");\n        }\n        this.socket.onerror = () => {\n            console.log(\"[error] Ошибка соединения\");\n        }\n\n        this.socket.onmessage = async (event) => {\n            const json = JSON.parse(event.data);\n            let unknownConversationFlag = true;\n\n            let newConversations = this.state.conversations.map( conversation => {\n                if (conversation.conversation_id === json.conversation_id) {\n                    unknownConversationFlag = false;\n                    conversation.message_text = json.message_text;\n                    return conversation;\n                } else {\n                    return conversation\n                }\n            });\n\n            if (unknownConversationFlag === true) {\n                const [error, response] = await Fetcher(\n                    HTTP + ADDR + \"/messenger/get_short_profile_info\",\n                    {conversationId: json.conversation_id}\n                    );\n                if (error === null){\n                    newConversations = [{...response, ...json}, ...newConversations];\n                    this.setState(s => ({conversationsOffset : s.conversationsOffset + 1}))\n                }else{\n                    this.handleError(\"Невозможно загрузить информацию профиля\")\n                }\n            }\n            this.setState({conversations: newConversations});\n            if (json.conversation_id === this.state.messengerConversationId){\n                this.setState(state => ({messengerMessagesList: [...state.messengerMessagesList, json]}))\n            }\n        };\n\n    }\n\n    handleConversationListScroll = ({target}) => {\n        const difference = target.scrollTopMax - target.scrollTop;\n        this._handleConversationListScroll(difference);\n    }\n\n    _handleConversationListScroll = Throttle((difference)=> {\n            if (difference < 10 &&\n                !this.state.conversationsDone &&\n                !this.state.areConversationsFetching) {\n                this.fetchConversations();\n            }\n        }, 1000\n    )\n\n\n    onMessengerTopBoundaryReached = Throttle((difference)=>{\n        if (difference < 10 &&\n            !this.state.messengerMessagesDone &&\n            !this.state.messengerAreMessagesFetching) {\n            this.fetchMessages();\n        }\n    }, 1000)\n\n\n    componentWillUnmount() {\n        this.socket.close();\n    }\n\n    fetchMessages = async ()=>{\n        const offset = this.state.messengerOffset;\n        const [error, response] =  await Fetcher(HTTP + ADDR + \"/messenger/conversation_messages\",\n            {\n                userId2: this.state.messengerPartnerInfo.userId,\n                limit: this.messagesLimit,\n                offset: offset\n            }\n        );\n\n        if (error === null){\n            this.setState(s => ({\n                messengerOffset: offset + this.messagesLimit,\n                Done: response.Done,\n                messengerMessagesList: [...response.MessagesList.reverse(), ...s.messengerMessagesList],\n                messengerConversationId: response.ConversationId\n            }))\n        }else{\n            this.handleError(\"Невозможно загрузить сообщения с сервера\")\n        }\n        return [error, response];\n    }\n\n    openDialog = (userId, first_name, last_name)=>{\n        this.setState(\n            {\n                messengerPartnerInfo : {userId, first_name, last_name, avatar_ref: HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(userId)}/profile_avatar.jpg`},\n                messengerMessagesList: [],\n                messengerConversationId: null,\n                Done: false,\n                messengerOffset : 0\n            },\n            ()=>{this.fetchMessages()}\n            );\n    }\n\n    fetchConversations = async (offset) =>{\n        if (offset === undefined) offset = this.state.conversationsOffset;\n        const [error, response] = await Fetcher(HTTP + ADDR + \"/messenger/conversation_list\",{limit: this.conversationsLimit, offset: offset});\n        if (error === null){\n            this.setState(s => ({conversations: [...s.conversations, ...response.Conversations], conversationsOffset: offset + this.conversationsLimit, conversationsDone: response.Done}));\n        }else{\n            this.handleError(\"Невозможно загрузить список диалогов\")\n        }\n    }\n\n    render() {\n        return (\n            <div className={\"message_page\"}>\n                <div className={\"conversations_list\"} onScroll={this.handleConversationListScroll}>\n                    {\n                        this.state.conversations.map((conversation)=>(\n                            <Conversation key = {conversation.conversation_id}\n                                          onChoose = {this.openDialog}\n                                          chosenId = {this.state.messengerPartnerInfo.userId}\n                                          {...conversation}\n                            />\n                        ))\n                    }\n                </div>\n\n                <Messenger myId = {this.myId}\n                           messagesList = {this.state.messengerMessagesList}\n                           partnerInfo = {this.state.messengerPartnerInfo}\n                           onMessengerTopBoundaryReached = {this.onMessengerTopBoundaryReached}\n                           handleError = {this.handleError}\n                />\n                {this.state.error && <InfoPopup text = {this.state.error} handleClose = {this.handleClose}/>}\n            </div>\n        )\n    }\n}\n\nconst Conversation = memo(({onChoose, chosenId, partner_id, first_name, last_name, message_text})=>{\n    const handleChoose = () => onChoose(partner_id, first_name, last_name);\n    return (\n      <div className={\"rel__container\"}\n           style={{backgroundColor: `${chosenId === partner_id ? \"lightgoldenrodyellow\" : \"white\"}`, cursor: 'pointer'}}\n           tabIndex={1}\n           onClick={handleChoose}\n      >\n          <img className={\"default_img rel_user__avatar\"}\n               src={HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(partner_id)}/profile_avatar.jpg`}\n               alt = {\" \"}\n          />\n          <div className={\"rel_user__vertical\"}>\n              <span className={\"rel_user__fullname\"}>{`${first_name} ${last_name}`}</span>\n              <span className={\"rel_user__last_message\"}>{`${message_text.length > 24 ? message_text.slice(0,24) + \"...\" : message_text}`}</span>\n          </div>\n      </div>\n    )\n})\n\nconst Messenger = memo (({messagesList, myId, partnerInfo, onMessengerTopBoundaryReached, handleError}) => {\n\n    const handleMessagesListScroll = ({target}) => {\n        const difference = target.scrollTop;\n        onMessengerTopBoundaryReached(difference);\n    }\n\n    const messagesBoxRef = useRef(null);\n    useEffect(() => {\n        /*\n        * 200 is the difference between new bottom and old scroll\n        * when user is not scrolling old messages, but ready for new ones - scroll to bottom\n        */\n        if (messagesBoxRef.current.scrollTopMax - messagesBoxRef.current.scrollTop < 200){\n            messagesBoxRef.current.scrollTop = messagesBoxRef.current.scrollTopMax;\n        }\n    });\n\n    const pushMessage = async (text) => {\n        const [error] = await Fetcher(\n            HTTP + ADDR + \"/messenger/push_message\",\n            {messageTo: partnerInfo.userId, messageText: text },\n            \"POST\",\n            \"text\"\n        );\n        if (error !== null){\n            this.handleError(\"Невозможно отправить сообщение\")\n        }\n    };\n\n    return(\n        <div className={\"messenger\"} style={{pointerEvents: `${partnerInfo.userId === undefined?'none':'auto'}`}}>\n            <div className={\"messenger__header\"}>\n                <ProfileAvatarBlock\n                    src = {partnerInfo.avatar_ref || undefined_avatar_pic}\n                    name = {`${partnerInfo.first_name || \"\"} ${partnerInfo.last_name || \"\"}`}\n                    nameColor = \"white\"\n                    description = \"\"\n                    descriptionColor = \"cadetblue\"\n                />\n            </div>\n\n            <div className={\"messenger__messages-box\"} ref = {messagesBoxRef} onScroll={handleMessagesListScroll}>\n                {\n                    messagesList.map((message) =>\n                        <Message text = {message.message_text}\n                                 myId = {myId}\n                                 senderId = {message.message_from}\n                                 key = {message.message_id}\n                        />\n                    )\n                }\n            </div>\n\n            <div className={\"messenger__send_new_message\"}>\n                {partnerInfo.userId===undefined && <div className={\"tumbleweed\"}/>}\n                <AddNewMessageArea placeholder = {\"Отправить сообщение\"}\n                                   buttonMessage = {\"Отправить\"}\n                                   onSend = {pushMessage}\n                />\n            </div>\n        </div>\n    )\n})\n\nconst Message = memo(({text = \"\", myId, senderId}) => {\n    return (\n            <div className={`message ${senderId === myId ? 'message__from_me' : 'message__from_friend'}`}>\n                {text}\n            </div>\n        )\n});\n\nexport default withRouter(MessagesPage);","import React, {memo, useRef} from \"react\";\nimport \"./add_new_message_area.scss\"\nimport \"../../scss/default_blocks.scss\"\n\nconst AddNewMessageArea = memo (({placeholder, buttonMessage, onSend}) => {\n    const smiles = ['😐','😫','😎', '😂', '😡', '😭', '😀','😗','😲','😬']\n    const ref = useRef()\n    const _onSend = () => {\n        onSend(ref.current.value);\n        ref.current.value = \"\";\n    }\n    const onSmileAddHandler = ({target})=>{\n        const oldMessage = ref.current.value;\n        const selectionStart = ref.current.selectionStart;\n        ref.current.value = oldMessage.slice(0, selectionStart) + target.innerText + oldMessage.slice(selectionStart, oldMessage.length);\n        ref.current.focus();\n        ref.current.setSelectionRange(selectionStart + 2, selectionStart + 2);\n    }\n    return (\n        <div className={\"send_new_message__container\"}>\n            <textarea className={\"default_search_input\"}\n                      placeholder={placeholder}\n                      ref={ref}\n            />\n            <div className={\"send_new_message__functional_area\"}>\n                <div className={\"smile_area\"}>\n                    {\n                        smiles.map(smile =>\n                            <span className={\"smile\"}\n                                  key = {smile}\n                                  role={\"img\"}\n                                  onClick={onSmileAddHandler}\n                            >\n                                {smile}\n                            </span>\n                        )\n                    }\n                </div>\n                <button className={\"add_record__button\"} onClick={_onSend}>{buttonMessage}</button>\n            </div>\n        </div>\n    )\n})\n\nexport default AddNewMessageArea;","module.exports = __webpack_public_path__ + \"static/media/undefined_avatar.e630516b.png\";"],"sourceRoot":""}