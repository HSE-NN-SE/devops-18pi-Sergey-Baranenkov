{"version":3,"sources":["components/friends/FriendsPage.js"],"names":["RelationClassifierLink","label","to","activeOnlyWhenExact","match","useRouteMatch","path","exact","style","backgroundColor","className","Relationships","props","fetchData","a","Fetcher","HTTP","ADDR","userId","params","id","mode","type","limit","response","setState","people","onAction","query","prevRelType","s","filter","person","user_id","state","prevProps","prevState","snapshot","this","map","Relationship","key","React","Component","console","log","PathFromIdGenerator","alt","src","first_name","last_name","pathname","onClick","withRouter","color","render"],"mappings":"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","file":"static/js/9.d32a8df6.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../../scss/page.scss\";\nimport \"./friends_page.scss\";\nimport PathFromIdGenerator from \"../../functools/PathFromIdGenerator\";\nimport \"../../scss/default_blocks.scss\";\nimport {HTTP, ADDR} from \"../../address\";\nimport {Link, Route, Switch, useRouteMatch, withRouter} from 'react-router-dom';\nimport Fetcher from \"../../functools/Fetcher\";\n\nfunction FriendsPage(props) {\n    return (\n            <div className={\"page__container\"}>\n                <div className={\"page__header background_pic__city background_pic__city_green\"}>\n                    <h1 style={{color: \"white\"}}>Друзья</h1>\n                    <p style={{color:  \"white\"}}>Здесь находится список друзей</p>\n                    <div className={\"friends_foreground_pic default_img\"}/>\n                </div>\n                <div className={\"friends_classifier__container\"}>\n                    <RelationClassifierLink\n                        to={`/связи/${props.match.params.id}/друзья`}\n                        label={\"Друзья\"}\n                    />\n                    <RelationClassifierLink\n                        to={`/связи/${props.match.params.id}/подписчики`}\n                        label={\"Подписчики\"}\n                    />\n                    <RelationClassifierLink\n                        to={`/связи/${props.match.params.id}/подписки`}\n                        label={\"Подписки\"}\n                    />\n                </div>\n                <Switch>\n                    <Route path=\"/связи/:id/друзья\" render={props => <Relationships type={3} {...props}/>}/>\n                    <Route path=\"/связи/:id/подписчики\" render={props => <Relationships type = {2} {...props}/>}/>\n                    <Route path=\"/связи/:id/подписки\" render = {props => <Relationships type ={1} {...props}/>}/>\n                </Switch>\n            </div>\n            )\n}\n\nfunction RelationClassifierLink({ label, to, activeOnlyWhenExact}) {\n    let match = useRouteMatch({\n        path: to,\n        exact: activeOnlyWhenExact\n    });\n\n    return (\n        <Link style={match && {backgroundColor: \"orange\"}} className={`default_link friends_classifier__item`} to={to}>\n            {label}\n        </Link>\n    );\n}\n\n\n\nclass Relationships extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            people: []\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.type !== this.props.type){\n            this.fetchData();\n        }\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n    fetchData = async ()=>{\n        const [, response] = await Fetcher(HTTP + ADDR + \"/relations/get_relations\",\n            {userId:this.props.match.params.id, mode: this.props.type, limit: 10}\n\n            );\n\n        this.setState({people: response || []});\n    }\n\n    onAction = async (userId) => {\n        const query = HTTP + ADDR + \"/relations/update_relationship\";\n        const [error] = await Fetcher(query, {prevRelType : this.props.type, userId}, \"POST\",\"text\");\n        if (error === null){\n            this.setState(s => ({people: s.people.filter(person => person.user_id!==userId)}));\n        }\n    }\n\n    render() {\n        return (\n            <>\n                {this.state.people.map( person =>\n                    <Relationship\n                        key = {person.user_id}\n                        {...person}\n                        type = {this.props.type}\n                        onAction={this.onAction}\n                    />\n                )}\n            </>\n        )\n    }\n}\n\nfunction Relationship(props) {\n    const onAction = ()=>{\n        props.onAction (props.user_id);\n    }\n    console.log(HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(props.user_id)}/profile_avatar.jpg`);\n    return (\n        <div className={\"rel__container\"}>\n            <img className={\"default_img rel_user__avatar\"} alt = \"\" src={\n                HTTP + ADDR + `/profile_bgs${PathFromIdGenerator(props.user_id)}/profile_avatar.jpg`\n            }\n            />\n            <div className={\"rel_user__vertical\"}>\n                <span className={\"rel_user__fullname\"}>{`${props.first_name} ${props.last_name}`}</span>\n                <Link className={\"rel_user__send_mes\"} to = {{\n                    pathname: '/сообщения/',\n                    user_id: props.user_id,\n                    first_name: props.first_name,\n                    last_name: props.last_name\n                }}>Написать сообщение</Link>\n\n            </div>\n            <div className={\"rel__functional\"}>\n                {   (props.type === 3 || props.type === 1)\n                    &&\n                    <button className={\"rel__button delete_friend__button\"} onClick={onAction}>❌</button>\n                }\n                {  props.type === 2\n                    &&\n                    <button className={\"rel__button add_friend__button\"} onClick={onAction}>+</button>\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default withRouter(FriendsPage);"],"sourceRoot":""}