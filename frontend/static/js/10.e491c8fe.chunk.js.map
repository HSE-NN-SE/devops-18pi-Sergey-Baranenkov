{"version":3,"sources":["components/gallery/GalleryPage.js"],"names":["GalleryPage","addImageRef","createRef","fetchLimit","pageId","props","match","params","id","state","ImagesList","offset","isFetching","Done","fetchImages","a","setState","Fetcher","HTTP","ADDR","limit","startFrom","userId","error","response","console","log","handleScrollThrottled","Throttle","Math","round","window","scrollY","innerHeight","document","documentElement","scrollHeight","postImageHandler","current","files","length","data","FormData","append","fetch","method","body","ok","text","imageId","image_id","adder_id","myId","deleteImageHandler","address","filter","image","this","addEventListener","removeEventListener","className","style","color","type","accept","ref","onChange","htmlFor","map","idx","PhotoBlock","key","React","Component","memo","PathFromIdGenerator","useState","isExpanded","update","src","onClick","alt","withRouter"],"mappings":"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","file":"static/js/10.e491c8fe.chunk.js","sourcesContent":["import React, {createRef, memo, useState} from \"react\";\nimport \"./gallery_page.scss\"\nimport Fetcher from \"../../functools/Fetcher\";\nimport Throttle from \"../../functools/Trottle\";\nimport \"../../scss/default_blocks.scss\";\nimport PathFromIdGenerator from \"../../functools/PathFromIdGenerator\";\nimport {withRouter} from \"react-router-dom\"\nimport {HTTP, ADDR} from \"../../address\";\n\nclass GalleryPage extends React.Component{\n    addImageRef = createRef();\n    fetchLimit = 17;\n    pageId = + this.props.match.params.id;\n    state = {ImagesList: [], offset: 0, isFetching: false, Done: false}\n\n    componentDidMount() {\n        this.fetchImages(this.fetchLimit - 1);\n        window.addEventListener('scroll', this.handleScrollThrottled, true);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScrollThrottled);\n    }\n\n    fetchImages = async (fetchLimit) => {\n        this.setState(() => ({isFetching: true}));\n        const [error, response] = await Fetcher(\n            HTTP + ADDR + \"/gallery/get_images\",\n            {limit: fetchLimit, startFrom: this.state.offset, userId : this.pageId}\n        )\n\n        if (error === null){\n            this.setState(state => ({\n                offset: state.offset + fetchLimit,\n                ImagesList: [...state.ImagesList, ...response.ImagesList],\n                Done: response.Done\n            }));\n        }else {\n            console.log(error);\n        }\n        this.setState(() => ({isFetching: false}));\n    };\n    \n\n    handleScrollThrottled = Throttle(()=>{\n        if (Math.round(window.scrollY + window.innerHeight) === document.documentElement.scrollHeight\n            &&\n            !this.state.Done\n            &&\n            !this.state.isFetching\n        ){\n            this.fetchImages(this.fetchLimit);\n        }\n    }, 1000)\n\n    postImageHandler = async ()=>{\n        if (this.addImageRef.current.files.length){\n            const data = new FormData();\n            data.append(\"image\", this.addImageRef.current.files[0])\n            const response = await fetch(HTTP + ADDR + '/gallery/post_image', {\n                method: 'post',\n                body: data,\n            });\n\n            if (response.ok){\n                const imageId = + await response.text()\n                this.setState(state => ({ImagesList:\n                        [\n                            {image_id:\n                                imageId,\n                                adder_id: this.myId,\n                            },\n                            ...state.ImagesList\n                        ],\n                    offset: state.offset + 1\n                }))\n            }\n\n        }\n    }\n\n    deleteImageHandler = async (imageId)=>{\n        console.log(imageId);\n        //todo delete\n        const address = HTTP + ADDR + \"/gallery/delete_image\"\n        const params = {imageId: imageId}\n\n        const [error] = await Fetcher(\n            address,\n            params,\n            \"GET\",\n            \"text\"\n        )\n\n        if (error === null){\n            this.setState(state => (\n                        {\n                            offset: state.offset - 1,\n                            ImagesList: state.ImagesList.filter((image)=>image.image_id !== imageId)\n                        }\n                    )\n            );\n        }else {\n            console.log(error);\n        }\n    }\n\n    render() {\n        return (\n            <div className={\"page__container\"}>\n                <div className={\"page__header background_pic__city background_pic__city_purple\"}>\n                    <h1 style={{color: \"white\"}}>Фотографии</h1>\n                    <p style={{color:  \"white\"}}>Здесь вы можете посмотреть фотографии</p>\n                    <div className={\"default_img\"}/>\n                </div>\n\n                <div className={\"gallery__container\"}>\n                    <div className={\"gallery__item\"}>\n                        <input\n                            type={\"file\"}\n                            className={\"hidden_input\"}\n                            id = {\"select_image_file__input\"}\n                            accept={\"image/jpeg\"}\n                            ref = {this.addImageRef}\n                            onChange={this.postImageHandler}\n                        />\n                        <label className={\"gallery__button_add\"}\n                               htmlFor=\"select_image_file__input\">\n                            +\n                        </label>\n                    </div>\n                    {\n                        this.state.ImagesList.map((image, idx) =>\n                            <PhotoBlock\n                                key = {idx}\n                                imageId={image.image_id}\n                                deleteImageHandler = {this.deleteImageHandler}\n                            />\n                        )\n                    }\n                </div>\n                {this.state.isFetching && <span>Загрузка...</span>}\n            </div>\n        )\n    }\n}\nconst PhotoBlock = memo(({imageId, deleteImageHandler}) =>{\n    console.log(\"render\", imageId);\n    const address = HTTP + ADDR + \"/gallery_storage\" + PathFromIdGenerator(imageId) + \"/img.jpg\";\n    const [isExpanded, update] = useState(false);\n    const updateSize = ()=>{\n        update(!isExpanded);\n    }\n\n    const onDeleteImage = () =>{\n        update(false);\n        deleteImageHandler(imageId);\n    }\n\n    return (\n        <div className={\"gallery__item\"}>\n            <img className={`gallery__photo ${isExpanded ? 'photo__expanded': null}`}\n                 src={address}\n                 onClick={updateSize}\n                 alt = {\"\"}\n            />\n            {isExpanded\n            &&\n            <button className={\"gallery_delete_photo_button\"}\n                    onClick={onDeleteImage}\n            >\n                Удалить\n            </button>}\n        </div>\n    )\n})\n\nexport default withRouter(GalleryPage)"],"sourceRoot":""}