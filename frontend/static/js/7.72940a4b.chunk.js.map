{"version":3,"sources":["components/gallery/GalleryPage.js"],"names":["GalleryPage","addImageRef","createRef","fetchLimit","pageId","props","match","params","id","myId","getCookie","state","ImagesList","offset","isFetching","Done","error","handleError","bind","handleClose","fetchImages","a","setState","Fetcher","HTTP","ADDR","limit","startFrom","userId","response","handleScrollThrottled","Throttle","Math","round","window","scrollY","innerHeight","document","documentElement","scrollHeight","postImageHandler","current","files","length","data","FormData","append","imageId","image_id","adder_id","addImageToMyGalleryHandler","address","deleteImageHandler","filter","image","fl","this","addEventListener","prevProps","prevState","snapshot","removeEventListener","className","style","color","type","accept","ref","onChange","htmlFor","map","PhotoBlock","key","addImageHandler","text","React","Component","memo","PathFromIdGenerator","useState","isExpanded","update","src","onClick","alt","withRouter"],"mappings":"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","file":"static/js/7.72940a4b.chunk.js","sourcesContent":["import React, {createRef, memo, useState} from \"react\";\nimport \"./gallery_page.scss\"\nimport Fetcher from \"../../functools/Fetcher\";\nimport Throttle from \"../../functools/Trottle\";\nimport \"../../scss/default_blocks.scss\";\nimport PathFromIdGenerator from \"../../functools/PathFromIdGenerator\";\nimport {withRouter} from \"react-router-dom\"\nimport {HTTP, ADDR} from \"../../address\";\nimport \"../../scss/hidden_input.scss\"\nimport \"../../scss/hidden_input.scss\"\nimport InfoPopup, {handleError, handleClose} from \"../infoPopup/infoPopup\";\nimport getCookie from \"../../functools/getCookie\";\n\nclass GalleryPage extends React.Component{\n    addImageRef = createRef();\n    fetchLimit = 20;\n    pageId = + this.props.match.params.id;\n    myId = + getCookie(\"userId\");\n    state = {ImagesList: [], offset: 0, isFetching: false, Done: false, error: null}\n    handleError = handleError.bind(this);\n    handleClose = handleClose.bind(this);\n\n    componentDidMount() {\n        const fl = this.pageId === this.myId ? this.fetchLimit - 1: this.fetchLimit;\n        this.fetchImages(fl);\n        window.addEventListener('scroll', this.handleScrollThrottled, true);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps !== this.props){\n            const fl = this.pageId === this.myId ? this.fetchLimit - 1: this.fetchLimit;\n            this.pageId = + this.props.match.params.id;\n            this.setState({ImagesList: [], offset: 0, isFetching: false, Done: false, error: null}, ()=> this.fetchImages(fl));\n        }\n    }\n\n\n    componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScrollThrottled);\n    }\n\n    fetchImages = async (fetchLimit) => {\n        this.setState(() => ({isFetching: true}));\n        const [error, response] = await Fetcher(\n            HTTP + ADDR + \"/gallery/get_images\",\n            {limit: fetchLimit, startFrom: this.state.offset, userId : this.pageId}\n        )\n\n        if (error === null){\n            this.setState(state => ({\n                offset: state.offset + fetchLimit,\n                ImagesList: [...state.ImagesList, ...response.ImagesList],\n                Done: response.Done\n            }));\n        }else {\n            this.handleError(\"Невозможно получить данные с сервера\")\n        }\n        this.setState(() => ({isFetching: false}));\n    };\n    \n\n    handleScrollThrottled = Throttle(()=>{\n        if (Math.round(window.scrollY + window.innerHeight) === document.documentElement.scrollHeight\n            &&\n            !this.state.Done\n            &&\n            !this.state.isFetching\n        ){\n            this.fetchImages(this.fetchLimit);\n        }\n    }, 1000)\n\n    postImageHandler = async ()=>{\n        if (this.addImageRef.current.files.length){\n            const data = new FormData();\n            data.append(\"image\", this.addImageRef.current.files[0])\n\n            const [error, response] = await Fetcher(\n                HTTP + ADDR + '/gallery/post_image',\n                {},\n                \"post\",\n                \"text\",\n                data\n                );\n\n            if (error === null){\n                const imageId = +response;\n                this.setState(state => ({ImagesList:\n                        [\n                            {image_id:\n                                imageId,\n                                adder_id: this.myId,\n                            },\n                            ...state.ImagesList\n                        ],\n                    offset: state.offset + 1\n                }))\n            }else{\n                this.handleError(\"Невозможно добавить изображение\")\n            }\n\n        }\n    }\n    addImageToMyGalleryHandler = async (imageId)=>{\n        const address = HTTP + ADDR + \"/gallery/add_to_my_gallery\"\n        const params = {imageId};\n        const [error] = await Fetcher(\n            address,\n            params,\n            \"Post\",\n            \"text\"\n        );\n        if (error !== null){\n            this.handleError(\"Невозможно добавить изображение в вашу галерею\")\n        }\n\n    }\n    deleteImageHandler = async (imageId)=>{\n        const address = HTTP + ADDR + \"/gallery/delete_image\"\n        const params = {imageId}\n\n        const [error] = await Fetcher(\n            address,\n            params,\n            \"GET\",\n            \"text\"\n        )\n\n        if (error === null){\n            this.setState(state => (\n                        {\n                            offset: state.offset - 1,\n                            ImagesList: state.ImagesList.filter((image)=>image.image_id !== imageId)\n                        }\n                    )\n            );\n        }else {\n            this.handleError(\"Невозможно удалить изображение\")\n        }\n    }\n\n    render() {\n        return (\n            <div className={\"page__container\"}>\n                <div className={\"page__header background_pic__city background_pic__city_purple\"}>\n                    <h1 style={{color: \"white\"}}>Фотографии</h1>\n                    <p style={{color:  \"white\"}}>Здесь вы можете посмотреть фотографии</p>\n                    <div className={\"default_img\"}/>\n                </div>\n                <div className={\"gallery__container\"}>\n                    {this.pageId === this.myId &&\n                            <div className={\"gallery__item\"}>\n                                <input\n                                    type={\"file\"}\n                                    className={\"hidden_input\"}\n                                    id = {\"select_image_file__input\"}\n                                    accept={\"image/jpeg\"}\n                                    ref = {this.addImageRef}\n                                    onChange={this.postImageHandler}\n                                />\n                                <label className={\"gallery__button_add\"}\n                                       htmlFor=\"select_image_file__input\">\n                                    +\n                                </label>\n                            </div>\n                    }\n                    {\n                        this.state.ImagesList.map((image) =>\n                            <PhotoBlock\n                                key = {image.image_id}\n                                imageId={image.image_id}\n                                myId = {this.myId}\n                                pageId = {this.pageId}\n                                deleteImageHandler = {this.deleteImageHandler}\n                                addImageHandler = {this.addImageToMyGalleryHandler}\n                            />\n                        )\n                    }\n                </div>\n                {this.state.isFetching && <span>Загрузка...</span>}\n                {this.state.error && <InfoPopup text = {this.state.error} handleClose = {this.handleClose}/>}\n            </div>\n        )\n    }\n}\nconst PhotoBlock = memo(({imageId, deleteImageHandler, addImageHandler, myId, pageId}) =>{\n    const address = HTTP + ADDR + \"/gallery_storage\" + PathFromIdGenerator(imageId) + \"/img.jpg\";\n    const [isExpanded, update] = useState(false);\n    const updateSize = ()=>{\n        update(!isExpanded);\n    }\n\n    const onDeleteImage = () =>{\n        update(false);\n        deleteImageHandler(imageId);\n    }\n\n    const onAddImage = () =>{\n        addImageHandler(imageId);\n    }\n\n    return (\n        <div className={\"gallery__item\"}>\n            <img className={`gallery__photo ${isExpanded ? 'photo__expanded': null}`}\n                 src={address}\n                 onClick={updateSize}\n                 alt = {\" \"}\n            />\n            {isExpanded\n            &&\n            (\n                pageId === myId\n                    ?\n                    <button className={\"gallery__button gallery_delete_photo_button\"}\n                            onClick={onDeleteImage}\n                    >\n                        Удалить\n                    </button>\n                    :\n                    <button className={\"gallery__button gallery_delete_photo_button\"}\n                            onClick={onAddImage}\n                    >\n                        Добавить\n                    </button>\n            )\n            }\n        </div>\n    )\n})\n\nexport default withRouter(GalleryPage)"],"sourceRoot":""}